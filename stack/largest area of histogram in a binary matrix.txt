#include <bits/stdc++.h>
using namespace std;

vector<int> prev_smallr(int *ptr,int n){
    vector<int> stack;
    vector<int> res;
    res.push_back(-1);
    stack.push_back(0);
    for(int i=1;i<n;i++){
        while(stack.size()!=0){
            int lastele=*(stack.rbegin());
            if(*(ptr+lastele)>=*(ptr+i)){
                stack.pop_back();
            }else{
                break;
            }
        }
        int val=(stack.size()==0)?-1:*(stack.rbegin());
        res.push_back(val);
        stack.push_back(i);
    }
    return res;
}


int largestAreaHistogram(vector<int> v){
    //previous smaller
	vector<int> prev_small=prev_smallr(&v[0],v.size());
	
	
	//next smaller
	vector<int> v_copy(v);
	reverse(v_copy.begin(),v_copy.end());

	vector<int> next_small=prev_smallr(&v_copy[0],v_copy.size());
	
	reverse(next_small.begin(),next_small.end());
	
	int n=next_small.size();
	for(int i=0;i<n;i++){
	    next_small[i]=(n-1-next_small[i]);
	}
	
	int res=0;
	for(int i=0;i<n;i++){
	    int curr=v[i];
	    curr+=(i-prev_small[i]-1)*v[i];
	    curr+=(next_small[i]-i-1)*v[i];
	    res=max(res,curr);
	}
	return res;

}





int main() {
	// your code goes here
	vector<vector<int>> v={{0,1,1,0},{1,1,1,1},{1,1,1,1},{1,1,0,0}};
	
	for(int i=1;i<v.size();i++){
	    for(int j=0;j<v[i].size();j++){
	        if(v[i][j]==1){
	            v[i][j]=v[i][j]+v[i-1][j];
	        }
	    }
	}
	int res=0;
	for(auto ele: v){
	    int val=largestAreaHistogram(ele);
	    res=max(res,val);
	}
	cout<<res;
	
	
	
}