#include <bits/stdc++.h>
using namespace std;


vector<int> lis_arr(vector<int>& arr){
    
    int n=arr.size();
    vector<int> lis(n,-1);
    for(int i=0;i<n;i++){
        lis[i]=1;
        for(int j=0;j<i;j++){
            
            if(arr[i]>arr[j]){
                lis[i]=max(lis[i],lis[j]+1);
            }
            
        }
    }
    
    return lis;
    
}


int main() {
	// your code goes here
	/* a bitonic subsequence is the sequence which contains both increasing and decreasing order of sequence but first it will be increasing then decreasing or vice versa*/
	
	vector<int> arr={3, 10, 2, 1, 20};
	int n=arr.size();
	
	vector<int> reversed=arr;
	reverse(reversed.begin(),reversed.end());
    
    vector<int> lis=lis_arr(arr);
    vector<int> lds=lis_arr(reversed);
    reverse(lds.begin(),lds.end());
    
    int res=INT_MIN;
    
    for(int i=0;i<n;i++){
        res=max(res,lis[i]+lds[i]-1);
    }
    cout<<res;

	
}
