#include <bits/stdc++.h>
using namespace std;

struct Treenode{
    int data;
    Treenode* left;
    Treenode* right;
    Treenode(int x){
        data=x;
        left=NULL;
        right=NULL;
    }
};


bool search(Treenode* root,int val){
    if(root==NULL){
        return false;
    }
    if(root->data==val){
        return true;
    }else if(root->data>val){
        return search(root->left,val);
    }else{
        return search(root->right,val);
    }
    return false;
}



Treenode* insert(Treenode* root,int val){

    if(root==NULL){
        root=new Treenode(val);
        
    }
    else if(val>root->data){
        root->right=insert(root->right,val);
    }else{
        root->left=insert(root->left,val);
    }
    return root;
    
}

Treenode* getsuccessor(Treenode* root){
    Treenode* curr=root->right;
    while(curr!=NULL and curr->left!=NULL){
        curr=curr->left;
    }
    return curr;
    
    
}


Treenode* deletion(Treenode* root,int val){
    if(root==NULL){
        return root;
    }
    if(root->data>val){
        root->left=deletion(root->left,val);
    }else if(root->data<val){
        root->right=deletion(root->right,val);
    }else{
        if(root->left==NULL){
            Treenode* temp=root->right;
            delete root;
            return temp;
        }else if(root->right==NULL){
            Treenode* temp=root->left;
            delete root;
            return temp;
        }else{
            Treenode* succ=getsuccessor(root);
            root->data=succ->data;
            root->right=deletion(root->right,succ->data);
        }
        
    }
    return root;
}



void inorder(Treenode* root){
    if(root==NULL){
        
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}




int main() {
	// your code goes here
	Treenode* head=NULL;
	head=insert(head,15);
	head=insert(head,5);
	head=insert(head,3);
	head=insert(head,20);
	head=insert(head,18);
	head=insert(head,16);
	head=insert(head,80);
	
	inorder(head);
	cout<<endl<<search(head,3)<<endl;
	
	head=deletion(head,15);
	
	inorder(head);
	
	
	

}
