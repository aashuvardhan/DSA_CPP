#include <bits/stdc++.h>
using namespace std;


void solve(vector<vector<int>>& mat,vector<vector<bool>>& visited,int row,int col,int n,string str,vector<string>& ans){
    
    if(row==(n-1) && col==(n-1)){
        ans.push_back(str);
        return;
    }
    
    
    //downward
    if(((row+1)<n) && (mat[row+1][col]==1) && (visited[row+1][col]==false)){
        visited[row][col]=true;
        solve(mat,visited,row+1,col,n,str+"D",ans);
        visited[row][col]=false;
    }
    
    //left
    if(((col-1)>=0) && (mat[row][col-1]==1) && (visited[row][col-1]==false)){
        visited[row][col]=true;
        solve(mat,visited,row,col-1,n,str+"L",ans);
        visited[row][col]=false;
    }
    
    //right
    if(((col+1)<n) && (mat[row][col+1]==1) && (visited[row][col+1]==false)){
        visited[row][col]=true;
        solve(mat,visited,row,col+1,n,str+"R",ans);
        visited[row][col]=false;
    }
    
    //upwards
    if(((row-1)>=0) && (mat[row-1][col]==1) && (visited[row-1][col]==false)){
        visited[row][col]=true;
        solve(mat,visited,row-1,col,n,str+"U",ans);
        visited[row][col]=false;
    }
    
    
    
}



int main() {
	// your code goes here
	int n=4;
	vector<vector<int>> mat={
	    {1, 0, 0, 0},
	    {1, 1, 0, 1}, 
	    {1, 1, 0, 0}, 
	    {0, 1, 1, 1}
	    };
	
	vector<vector<bool>> visited(n,vector<bool> (n,false));
	
	vector<string> ans;
	
	if(mat[0][0]==1){
	    solve(mat,visited,0,0,n,"",ans);
	}
	
	
	for(auto ele: ans){
	    cout<<ele<<endl;
	}
	
	

}
