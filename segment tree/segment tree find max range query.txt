#include <bits/stdc++.h>
using namespace std;


void update_query(vector<int>& tree,int start,int end,int index,int new_val,int pos){

    if(pos<start or pos>end){
        return;
    }
    
    if(start==end){
        tree[index]=new_val;
        return;
    }else{
        int mid=(start+end)/2;
        if(pos<=mid){
            update_query(tree,start,mid,2*index+1,new_val,pos);
        }else{
            update_query(tree,mid+1,end,2*index+2,new_val,pos);
        }
        tree[index]=max(tree[2*index+1],tree[2*index+2]);
    }
    
    
}



int range_query_get_max(vector<int>& tree,int qstart,int qend,int start,int end,int index){
    
    if(end<qstart or start>qend){
        return INT_MIN;
    }
    if(qstart<=start and qend>=end){
        return tree[index];
    }
    int mid=(start+end)/2;
    return max(range_query_get_max(tree,qstart,qend,start,mid,2*index+1),
		range_query_get_max(tree,qstart,qend,mid+1,end,2*index+2));
    
}



void construct_segment_tree(vector<int>& arr,vector<int>& tree, int start,int end,int index){
    
    if(start==end){
        tree[index]=arr[start];
        return;
    }
    
    int mid=(start+end)/2;
    construct_segment_tree(arr,tree,start,mid,2*index+1);
    construct_segment_tree(arr,tree,mid+1,end,2*index+2);
                
    tree[index]=max(tree[2*index+1],tree[2*index+2]);
    
    
}



int main() {
	// your code goes here
	vector<int> arr={10,20,30,40};
	int n=arr.size();
	vector<int> tree(4*n,0);
	
	construct_segment_tree(arr,tree,0,n-1,0);
	
	for(auto ele: tree){
	    cout<<ele<<" ";
	}
	cout<<endl;
	
	int val=range_query_get_max(tree,0,2,0,n-1,0);
	cout<<val<<endl;
	
	
	//updation
	int pos=1;
	int new_val=80;
	
	
	
	update_query(tree,0,n-1,0,new_val,pos);
	arr[pos]=new_val;
	
	for(auto ele: tree){
	    cout<<ele<<" ";
	}
	cout<<endl;
	
	
	pos=1;
	new_val=5;
	
	
	
	update_query(tree,0,n-1,0,new_val,pos);
	arr[pos]=new_val;
	
	for(auto ele: tree){
	    cout<<ele<<" ";
	}
	cout<<endl;
	
	
}
